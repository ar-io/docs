(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{349:function(t,e,_){"use strict";_.r(e);var v=_(10),r=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"environmental-variables"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#environmental-variables"}},[t._v("#")]),t._v(" Environmental Variables")]),t._v(" "),e("h2",{attrs:{id:"overview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),e("p",[t._v("The AR.IO Gateway allows configuration customization through environmental variables. These variables dictate the gateway's behavior, from block synchronization settings to log formatting. Detailed below is a table enumerating all available environmental variables, their respective types, default values, and a brief description. Note that certain variables, such as "),e("code",[t._v("SANDBOX_PROTOCOL")]),t._v(", rely on others (e.g., "),e("code",[t._v("ARNS_ROOT_HOST")]),t._v(") to function effectively. Ensure proper understanding of these dependencies when configuring.")]),t._v(" "),e("h2",{attrs:{id:"variables"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[t._v("#")]),t._v(" Variables")]),t._v(" "),e("div",{staticStyle:{"text-align":"center"}},[e("table",{staticClass:"inline-table",attrs:{id:"gateway-table"}},[e("tr",[e("th",[t._v("ENV Name")]),t._v(" "),e("th",[t._v("Type")]),t._v(" "),e("th",[t._v("Default Value")]),t._v(" "),e("th",[t._v("Description")])]),t._v(" "),e("tr",[e("th",[t._v("START_HEIGHT")]),t._v(" "),e("td",[t._v('Number or "Infinity"')]),t._v(" "),e("td",[t._v("0")]),t._v(" "),e("td",[t._v("Starting block height for node synchronization (0 = start from genesis block)")])]),t._v(" "),e("tr",[e("th",[t._v("STOP_HEIGHT")]),t._v(" "),e("td",[t._v('Number or "Infinity"')]),t._v(" "),e("td",[t._v('"Infinity"')]),t._v(" "),e("td",[t._v("Stop block height for node synchronization (Infinity = keep syncing until stopped)")])]),t._v(" "),e("tr",[e("th",[t._v("TRUSTED_NODE_URL")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v('"https://arweave.net"')]),t._v(" "),e("td",[t._v("Arweave node to use for fetching data")])]),t._v(" "),e("tr",[e("th",[t._v("TRUSTED_GATEWAY_URL")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v('"https://arweave.net"')]),t._v(" "),e("td",[t._v("Arweave node to use for proxying reqeusts")])]),t._v(" "),e("tr",[e("th",[t._v("TRUSTED_ARNS_GATEWAY_URL")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("https://NAME.arweave.dev")]),t._v(" "),e("td",[t._v("ArNS gateway")])]),t._v(" "),e("tr",[e("th",[t._v("INSTANCE_ID")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v('""')]),t._v(" "),e("td",[t._v('Adds an "INSTANCE_ID" field to output logs')])]),t._v(" "),e("tr",[e("th",[t._v("LOG_FORMAT")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v('"simple"')]),t._v(" "),e("td",[t._v('Sets the format of output logs, accepts "simple" and "json"')])]),t._v(" "),e("tr",[e("th",[t._v("SKIP_CACHE")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("If true, skips the local cache and always fetches headers from the node")])]),t._v(" "),e("tr",[e("th",[t._v("PORT")]),t._v(" "),e("td",[t._v("Number")]),t._v(" "),e("td",[t._v("4000")]),t._v(" "),e("td",[t._v("AR.IO node exposed port number")])]),t._v(" "),e("tr",[e("th",[t._v("SIMULATED_REQUEST_FAILURE_RATE")]),t._v(" "),e("td",[t._v("Number")]),t._v(" "),e("td",[t._v("0")]),t._v(" "),e("td",[t._v("Number from 0 to 1, representing the probability of a request failing")])]),t._v(" "),e("tr",[e("th",[t._v("AR_IO_WALLET")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v('""')]),t._v(" "),e("td",[t._v("Arweave wallet address used for staking and rewards")])]),t._v(" "),e("tr",[e("th",[t._v("ADMIN_API_KEY")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("Generated")]),t._v(" "),e("td",[t._v("API key used for admin API requests (if not set, it is generated and logged into the console)")])]),t._v(" "),e("tr",[e("th",[t._v("BACKFILL_BUNDLE_RECORDS")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("If true, AR.IO node will start indexing missing bundles")])]),t._v(" "),e("tr",[e("th",[t._v("FILTER_CHANGE_REPROCESS")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("If true, all indexed bundles will be reprocessed with the new filters (you can use this when you change the filters)")])]),t._v(" "),e("tr",[e("th",[t._v("ANS104_UNBUNDLE_FILTER")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v('{"never": true}')]),t._v(" "),e("td",[t._v("Only bundles compliant with this filter will be unbundled")])]),t._v(" "),e("tr",[e("th",[t._v("ANS104_INDEX_FILTER")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v('{"never": true}')]),t._v(" "),e("td",[t._v("Only bundles compliant with this filter will be indexed")])]),t._v(" "),e("tr",[e("th",[t._v("ARNS_ROOT_HOST")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("undefined")]),t._v(" "),e("td",[t._v("Domain name for ArNS host")])]),t._v(" "),e("tr",[e("th",[t._v("SANDBOX_PROTOCOL")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("undefined")]),t._v(" "),e("td",[t._v('Protocol setting in process of creating sandbox domains in ArNS (ARNS_ROOT_HOST needs to be set for this env to have any effect) accepts "http" or "https"')])]),t._v(" "),e("tr",[e("th",[t._v("START_WRITERS")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("true")]),t._v(" "),e("td",[t._v("If true, start indexing blocks, tx, ANS104 bundles")])]),t._v(" "),e("tr",[e("th",[t._v("RUN_OBSERVER")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("true")]),t._v(" "),e("td",[t._v("If true, runs the Observer alongside the gateway to generate Network compliance reports")])]),t._v(" "),e("tr",[e("th",[t._v("MIN_RELEASE_NUMBER")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v('"0"')]),t._v(" "),t._v("Sets the minimum Gateway release version to check while doing a gateway version assessment")]),t._v(" "),e("tr",[e("th",[t._v("AR_IO_NODE_RELEASE")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v('"0"')]),t._v(" "),t._v("Sets the current ar.io node version to be set on X-AR-IO-Node-Release header on requests to the reference gateway")]),t._v(" "),e("tr",[e("th",[t._v("OBSERVER_WALLET")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("undefined")]),t._v(" "),e("td",[t._v("The public wallet address of the wallet being used to sign report upload transactions for Observer")])]),t._v(" "),e("tr",[e("th",[t._v("CHUNKS_DATA_PATH")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v('"data/chunks"')]),t._v(" "),t._v("Sets the location for chunked data to be saved. If omitted, chunked data will be stored in the `data` directory")]),t._v(" "),e("tr",[e("th",[t._v("CONTIGUOUS_DATA_PATH")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v('"data/contiguous"')]),t._v(" "),t._v("Sets the location for contiguous data to be saved. If omitted, contiguous data will be stored in the `data` directory")]),t._v(" "),e("tr",[e("th",[t._v("HEADERS_DATA_PATH")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v('"data/headers"')]),t._v(" "),t._v("Sets the location for header data to be saved. If omitted, header data will be stored in the `data` directory")]),t._v(" "),e("tr",[e("th",[t._v("SQLITE_DATA_PATH")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v('"data/sqlite"')]),t._v(" "),t._v("Sets the location for sqlite indexed data to be saved. If omitted, sqlite data will be stored in the `data` directory")]),t._v(" "),e("tr",[e("th",[t._v("TEMP_DATA_PATH")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v('"data/tmp"')]),t._v(" "),t._v("Sets the location for temporary data to be saved. If omitted, temporary data will be stored in the `data` directory")]),t._v(" "),e("tr",[e("th",[t._v("LMDB_DATA_PATH")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v('"data/LMDB"')]),t._v(" "),t._v("Sets the location for LMDB data to be saved. If omitted, LMDB data will be stored in the `data` directory")]),t._v(" "),e("tr",[e("th",[t._v("CHAIN_CACHE_TYPE")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v('"redis"')]),t._v(" "),e("td",[t._v("Sets the method for caching chain data, defaults to redis if gateway is started with docker-compose, otherwise defaults to LMDB")])]),t._v(" "),e("tr",[e("th",[t._v("REDIS_CACHE_URL")]),t._v(" "),e("td",[t._v("String (URL)")]),t._v(" "),e("td",[t._v('"redis://localhost:6379"')]),t._v(" "),e("td",[t._v("URL of Redis database to be used for caching")])]),t._v(" "),e("tr",[e("th",[t._v("REDIS_CACHE_TTL_SECONDS")]),t._v(" "),e("td",[t._v("Number")]),t._v(" "),e("td",[t._v("28800")]),t._v(" "),e("td",[t._v("TTL value for Redis cache, defaults to 8 hours (28800 seconds)")])]),t._v(" "),e("tr",[e("th",[t._v("ENABLE_FS_HEADER_CACHE_CLEANUP")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("If true, periodically deletes cached header data")])]),t._v(" "),e("tr",[e("th",[t._v("NODE_JS_MAX_OLD_SPACE_SIZE")]),t._v(" "),e("td",[t._v("Number")]),t._v(" "),e("td",[t._v("system default")]),t._v(" "),e("td",[t._v("Sets the memory limit, in Megabytes, for NodeJs. Default value depends on hardware")])]),t._v(" "),e("tr",[e("th",[t._v("SUBMIT_CONTRACT_INTERACTIONS")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("true")]),t._v(" "),e("td",[t._v("If true, Observer will submit its generated reports to the ar.io Network. If false, reports will be generated but not submitted")])]),t._v(" "),e("tr",[e("th",[t._v("REDIS_MAX_MEMORY")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("256mb")]),t._v(" "),e("td",[t._v("Sets the max memory allocated to Redis")])]),t._v(" "),e("tr",[e("th",[t._v("REDIS_EXTRA_FLAGS")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v('--save "" --appendonly no')]),t._v(" "),e("td",[t._v("Additional CLI flags passed to Redis")])]),t._v(" "),e("tr",[e("th",[t._v("WEBHOOK_TARGET_SERVERS")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("undefined")]),t._v(" "),e("td",[t._v("Target servers for webhooks")])]),t._v(" "),e("tr",[e("th",[t._v("WEBHOOK_INDEX_FILTER")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v('{"never": true}')]),t._v(" "),e("td",[t._v("Only emit webhooks for transactions and data items compliant with this filter")])]),t._v(" "),e("tr",[e("th",[t._v("WEBHOOK_BLOCK_FILTER")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v('{"never": true}')]),t._v(" "),e("td",[t._v("Only emit webhooks for blocks compliant with this filter")])]),t._v(" "),e("tr",[e("th",[t._v("CONTIGUOUS_DATA_CACHE_CLEANUP_THRESHOLD")]),t._v(" "),e("td",[t._v("Number")]),t._v(" "),e("td",[t._v("undefined")]),t._v(" "),e("td",[t._v("Sets the age threshold in seconds; files older than this are candidates for contiguous data cache cleanup")])]),t._v(" "),e("tr",[e("th",[t._v("RUN_RESOLVER")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("If true, enables the experimental local ArNS resolver service")])]),t._v(" "),e("tr",[e("th",[t._v("TRUSTED_ARNS_RESOLVER_TYPE")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("gateway")]),t._v(" "),e("td",[t._v("Sets the type of ArNS resolver the gateway will use, either `gateway` or `resolver`. Set `resolver` to use experimental local ArNS resolver.")])]),t._v(" "),e("tr",[e("th",[t._v("TRUSTED_ARNS_RESOLVER_URL")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("https:__NAME__.arweave.dev")]),t._v(" "),e("td",[t._v("Sets the url a gateway will use to request ArNS name resolution when type is set to `resolver`")])]),t._v(" "),e("tr",[e("th",[t._v("ENABLE_MEMPOOL_WATCHER")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("false")]),t._v(" "),e("td",[t._v("If true, the gateway will start indexing pending tx from the mempool")])]),t._v(" "),e("tr",[e("th",[t._v("MEMPOOL_POLLING_INTERVAL_MS")]),t._v(" "),e("td",[t._v("Number")]),t._v(" "),e("td",[t._v("30000")]),t._v(" "),e("td",[t._v("Sets the mempool Polling interval, in milliseconds")])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);