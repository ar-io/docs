2:"$Sreact.fragment"
4:I[5244,[],""]
5:I[3866,[],""]
6:I[2179,["4839","static/chunks/4839-2c43e538f3c20b25.js","5725","static/chunks/5725-75c60c391537bd29.js","9247","static/chunks/9247-d1d8b3cf60de3aab.js","6081","static/chunks/app/build/guides/arns-viewer/page-de23dd9580ee0105.js"],"Heading"]
7:I[4839,["4839","static/chunks/4839-2c43e538f3c20b25.js","5725","static/chunks/5725-75c60c391537bd29.js","9247","static/chunks/9247-d1d8b3cf60de3aab.js","6081","static/chunks/app/build/guides/arns-viewer/page-de23dd9580ee0105.js"],""]
8:I[5856,["4839","static/chunks/4839-2c43e538f3c20b25.js","5725","static/chunks/5725-75c60c391537bd29.js","9247","static/chunks/9247-d1d8b3cf60de3aab.js","6081","static/chunks/app/build/guides/arns-viewer/page-de23dd9580ee0105.js"],"Pre"]
9:I[5856,["4839","static/chunks/4839-2c43e538f3c20b25.js","5725","static/chunks/5725-75c60c391537bd29.js","9247","static/chunks/9247-d1d8b3cf60de3aab.js","6081","static/chunks/app/build/guides/arns-viewer/page-de23dd9580ee0105.js"],"Code"]
17:I[7370,["4839","static/chunks/4839-2c43e538f3c20b25.js","5725","static/chunks/5725-75c60c391537bd29.js","9247","static/chunks/9247-d1d8b3cf60de3aab.js","6081","static/chunks/app/build/guides/arns-viewer/page-de23dd9580ee0105.js"],"Feedback"]
18:I[6213,[],"OutletBoundary"]
1a:I[6213,[],"MetadataBoundary"]
1c:I[6213,[],"ViewportBoundary"]
1e:I[4835,[],""]
1:HL["/docs/_next/static/css/8a4f4ef9baffb577.css","style"]
a:T6a2,<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">arnext</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;arnext/config&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nextConfig</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> { reactStrictMode</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> }</span></span>
<span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">arnext</span><span style="color: var(--shiki-color-text)">(nextConfig)</span></span>
<span></span>b:T1abe,<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">arnext</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;arnext/config&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">webpack</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;webpack&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nextConfig</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  reactStrictMode</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">webpack</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (config) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">config</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">resolve</span><span style="color: var(--shiki-color-text)">.fallback </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-token-constant)">config</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">resolve</span><span style="color: var(--shiki-color-text)">.fallback</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      fs</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      process</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;process/browser&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      buffer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;buffer/&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    };</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">config</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">plugins</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">webpack</span><span style="color: var(--shiki-token-function)">.ProvidePlugin</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">        process</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;process/browser&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        Buffer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;buffer&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Buffer&quot;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      })</span></span>
<span><span style="color: var(--shiki-color-text)">    );</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> config;</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">};</span></span>
<span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">arnext</span><span style="color: var(--shiki-color-text)">(nextConfig);</span></span>
<span></span>c:T109c,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { Routes</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> Route } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;react-router-dom&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { createBrowserRouter</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> RouterProvider } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;react-router-dom&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> Home </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;../pages/index&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> NotFound </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;../pages/404&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ArweaveRoutes</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-function)">Routes</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)">Route path</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/&quot;</span><span style="color: var(--shiki-color-text)"> element</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{&lt;Home /&gt;} </span><span style="color: var(--shiki-token-keyword)">/&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)">Route path</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;*&quot;</span><span style="color: var(--shiki-color-text)"> element</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{&lt;NotFound /&gt;} </span><span style="color: var(--shiki-token-keyword)">/&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&lt;/</span><span style="color: var(--shiki-color-text)">Routes</span><span style="color: var(--shiki-token-keyword)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> ArweaveRoutes;</span></span>
<span></span>d:T1b41,<span><span style="color: var(--shiki-token-comment)">/**</span></span>
<span><span style="color: var(--shiki-token-comment)"> * Connect to the Arweave wallet using ArConnect and request permissions.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@returns</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{Promise&lt;string&gt;}</span><span style="color: var(--shiki-token-comment)"> The active wallet address.</span></span>
<span><span style="color: var(--shiki-token-comment)"> */</span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">connectWallet</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">arweaveWallet</span><span style="color: var(--shiki-token-function)">.connect</span><span style="color: var(--shiki-color-text)">([</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;ACCESS_ADDRESS&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;SIGN_TRANSACTION&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;ACCESS_PUBLIC_KEY&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;SIGNATURE&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  ]);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">address</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">arweaveWallet</span><span style="color: var(--shiki-token-function)">.getActiveAddress</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> address;</span></span>
<span><span style="color: var(--shiki-color-text)">};</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">/**</span></span>
<span><span style="color: var(--shiki-token-comment)"> * Truncate a wallet address for display purposes.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@param</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{string}</span><span style="color: var(--shiki-token-comment)"> address - The wallet address to truncate.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@returns</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{string}</span><span style="color: var(--shiki-token-comment)"> The truncated address.</span></span>
<span><span style="color: var(--shiki-token-comment)"> */</span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">truncateAddress</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (address) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">address</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">...</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">address</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">};</span></span>
<span></span>e:T8e8,import { ARIO, ANT, ArconnectSigner } from "@ar.io/sdk/web";

/**
 * Initialize ArIO and fetch all ArNS records.
 * @returns {Promise<Object>} All ArNS records.
 */
export const fetchArNSRecords = async () => {
  const ario = ARIO.init();
  let allRecords = [];
  let hasMore = true;
  let cursor;

  // Paginates through all records to get the full registry.
  while (hasMore) {
    const response = await ario.getArNSRecords({
      limit: 10000, // You can adjust the limit as needed
      sortBy: "name",
      sortOrder: "asc",
      cursor: cursor,
    });

    allRecords = [...allRecords, ...response.items];
    cursor = response.nextCursor;
    hasMore = response.hasMore;
  }

  // console.log(allRecords);
  return allRecords;
};

/**
 * Initialize ANT with the given processId.
 * @param {string} processId - The processId.
 * @returns {Object} ANT instance.
 */
export const initANT = (processId) => {
  return ANT.init({ processId });
};

/**
 * Fetch detailed records, owner, and controllers for a given processId.
 * @param {string} contractTxId - The processId.
 * @returns {Promise<Object>} Detailed records, owner, and controllers.
 */
export const fetchRecordDetails = async (processId) => {
  const ant = initANT(processId);
  const detailedRecords = await ant.getRecords();
  const owner = await ant.getOwner();
  const controllers = await ant.getControllers();
  return { detailedRecords, owner, controllers };
};

/**
 * Set a new record in the ANT process.
 * @param {string} processId - The processId.
 * @param {string} subDomain - The subdomain for the record.
 * @param {string} transactionId - The transaction ID the record should resolve to.
 * @param {number} ttlSeconds - The Time To Live (TTL) in seconds.
 * @returns {Promise<Object>} Result of the record update.
 */
export const setANTRecord = async (
  processId,
  name,
  transactionId,
  ttlSeconds
) => {
  console.log(`Pid: ${processId}`);
  console.log(`name: ${name}`);
  console.log(`txId: ${transactionId}`);
  const browserSigner = new ArconnectSigner(window.arweaveWallet);
  const ant = ANT.init({ processId, signer: browserSigner });
  const result = await ant.setRecord({
    undername: name,
    transactionId,
    ttlSeconds,
  });
  console.log(result);
  return result;
};
f:T5a2e,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { ARIO</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ANT</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ArconnectSigner } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@ar.io/sdk/web&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">/**</span></span>
<span><span style="color: var(--shiki-token-comment)"> * Initialize ArIO and fetch all ArNS records.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@returns</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{Promise&lt;Object&gt;}</span><span style="color: var(--shiki-token-comment)"> All ArNS records.</span></span>
<span><span style="color: var(--shiki-token-comment)"> */</span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchArNSRecords</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ARIO</span><span style="color: var(--shiki-token-function)">.init</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> allRecords </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> hasMore </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> cursor;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Paginates through all records to get the full registry.</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (hasMore) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-token-function)">.getArNSRecords</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">      limit</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10000</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// You can adjust the limit as needed</span></span>
<span><span style="color: var(--shiki-color-text)">      sortBy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;name&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      sortOrder</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;asc&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">      cursor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> cursor</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    });</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    allRecords </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">allRecords</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.items];</span></span>
<span><span style="color: var(--shiki-color-text)">    cursor </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.nextCursor;</span></span>
<span><span style="color: var(--shiki-color-text)">    hasMore </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">response</span><span style="color: var(--shiki-color-text)">.hasMore;</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// console.log(allRecords);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> allRecords;</span></span>
<span><span style="color: var(--shiki-color-text)">};</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">/**</span></span>
<span><span style="color: var(--shiki-token-comment)"> * Initialize ANT with the given processId.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@param</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{string}</span><span style="color: var(--shiki-token-comment)"> processId - The processId.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@returns</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{Object}</span><span style="color: var(--shiki-token-comment)"> ANT instance.</span></span>
<span><span style="color: var(--shiki-token-comment)"> */</span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">initANT</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (processId) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ANT</span><span style="color: var(--shiki-token-function)">.init</span><span style="color: var(--shiki-color-text)">({ processId });</span></span>
<span><span style="color: var(--shiki-color-text)">};</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">/**</span></span>
<span><span style="color: var(--shiki-token-comment)"> * Fetch detailed records, owner, and controllers for a given processId.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@param</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{string}</span><span style="color: var(--shiki-token-comment)"> contractTxId - The processId.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@returns</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{Promise&lt;Object&gt;}</span><span style="color: var(--shiki-token-comment)"> Detailed records, owner, and controllers.</span></span>
<span><span style="color: var(--shiki-token-comment)"> */</span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchRecordDetails</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> (processId) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ant</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">initANT</span><span style="color: var(--shiki-color-text)">(processId);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">detailedRecords</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ant</span><span style="color: var(--shiki-token-function)">.getRecords</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">owner</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ant</span><span style="color: var(--shiki-token-function)">.getOwner</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">controllers</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ant</span><span style="color: var(--shiki-token-function)">.getControllers</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> { detailedRecords</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> owner</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> controllers };</span></span>
<span><span style="color: var(--shiki-color-text)">};</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">/**</span></span>
<span><span style="color: var(--shiki-token-comment)"> * Set a new record in the ANT process.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@param</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{string}</span><span style="color: var(--shiki-token-comment)"> processId - The processId.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@param</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{string}</span><span style="color: var(--shiki-token-comment)"> subDomain - The subdomain for the record.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@param</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{string}</span><span style="color: var(--shiki-token-comment)"> transactionId - The transaction ID the record should resolve to.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@param</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{number}</span><span style="color: var(--shiki-token-comment)"> ttlSeconds - The Time To Live (TTL) in seconds.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@returns</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{Promise&lt;Object&gt;}</span><span style="color: var(--shiki-token-comment)"> Result of the record update.</span></span>
<span><span style="color: var(--shiki-token-comment)"> */</span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">setANTRecord</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span><span style="color: var(--shiki-color-text)">  processId</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  name</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  transactionId</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  ttlSeconds</span></span>
<span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`Pid: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">processId</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`name: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">name</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`txId: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">transactionId</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">browserSigner</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ArconnectSigner</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.arweaveWallet);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ant</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ANT</span><span style="color: var(--shiki-token-function)">.init</span><span style="color: var(--shiki-color-text)">({ processId</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> signer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> browserSigner });</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ant</span><span style="color: var(--shiki-token-function)">.setRecord</span><span style="color: var(--shiki-color-text)">({</span></span>
<span><span style="color: var(--shiki-color-text)">    undername</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> name</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    transactionId</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">    ttlSeconds</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">  });</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(result);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span><span style="color: var(--shiki-color-text)">};</span></span>
<span></span>10:T1fc8,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> React </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;react&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { connectWallet</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> truncateAddress } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;../utils/auth&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">/**</span></span>
<span><span style="color: var(--shiki-token-comment)"> * Header component for displaying the connect wallet button and navigation.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@param</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{Object}</span><span style="color: var(--shiki-token-comment)"> props - Component props.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@param</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{string}</span><span style="color: var(--shiki-token-comment)"> props.address - The connected wallet address.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@param</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{function}</span><span style="color: var(--shiki-token-comment)"> props.setAddress - Function to set the connected wallet address.</span></span>
<span><span style="color: var(--shiki-token-comment)"> */</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Header</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ({ address</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> setAddress }) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">handleConnectWallet</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">walletAddress</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">connectWallet</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">setAddress</span><span style="color: var(--shiki-color-text)">(walletAddress);</span></span>
<span><span style="color: var(--shiki-color-text)">    } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Failed to connect wallet:&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> error);</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">  };</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)">div className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;header&quot;</span><span style="color: var(--shiki-token-keyword)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)">button className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;connect-wallet&quot;</span><span style="color: var(--shiki-color-text)"> onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{handleConnectWallet}</span><span style="color: var(--shiki-token-keyword)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">        {address ? </span><span style="color: var(--shiki-token-string-expression)">`Connected: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-function)">truncateAddress</span><span style="color: var(--shiki-color-text)">(address)</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)"> : </span><span style="color: var(--shiki-token-string-expression)">&quot;Connect Wallet&quot;</span><span style="color: var(--shiki-color-text)">}</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&lt;/</span><span style="color: var(--shiki-color-text)">button</span><span style="color: var(--shiki-token-keyword)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&lt;/</span><span style="color: var(--shiki-color-text)">div</span><span style="color: var(--shiki-token-keyword)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">  );</span></span>
<span><span style="color: var(--shiki-color-text)">};</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> Header;</span></span>
<span></span>11:T1819,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> React </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;react&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { Link } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;arnext&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">/**</span></span>
<span><span style="color: var(--shiki-token-comment)"> * RecordsGrid component for displaying a grid of record keys.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@param</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{Object}</span><span style="color: var(--shiki-token-comment)"> props - Component props.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@param</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{Array&lt;string&gt;}</span><span style="color: var(--shiki-token-comment)"> props.keys - Array of record keys to display.</span></span>
<span><span style="color: var(--shiki-token-comment)"> */</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RecordsGrid</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ({ keys }) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;records-grid&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">      {</span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">((key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">key</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{index}</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;record-key&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`clicked on </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">key</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">); </span></span>
<span><span style="color: var(--shiki-color-text)">          }}</span></span>
<span><span style="color: var(--shiki-color-text)">        &gt;</span></span>
<span><span style="color: var(--shiki-color-text)">          {key}</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">      ))}</span></span>
<span><span style="color: var(--shiki-color-text)">    &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">  );</span></span>
<span><span style="color: var(--shiki-color-text)">};</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> RecordsGrid;</span></span>
<span></span>12:T56a,"use client";
import { useEffect, useState } from "react";
import Header from "@/components/Header";
import { fetchArNSRecords } from "@/utils/arweave";
import RecordsGrid from "@/components/RecordsGrid";

export default function Home() {
  const [arnsRecords, setArnsRecords] = useState(null); // State for storing all ArNS records
  const [isProcessing, setIsProcessing] = useState(true); // State for processing indicator
  const [searchTerm, setSearchTerm] = useState("") // used to filter displayed results by search input
  const [address, setAddress] = useState(null); // State for wallet address
  

  useEffect(() => {
    const fetchRecords = async () => {
      const allRecords = await fetchArNSRecords();
      setArnsRecords(allRecords);
      setIsProcessing(false);
    };

    fetchRecords();
  }, []);

  return (
    <div>
      <Header address={address} setAddress={setAddress} />
      {isProcessing ? (
        "processing"
      ) : (
        <div>
          <h2>Search</h2>
          <input 
          type="text"
          value={searchTerm}
          className ="search-bar"
          onChange = {(e) => {setSearchTerm(e.target.value)}}
          />
        <RecordsGrid
          keys={arnsRecords
            .map((r) => r.name)
            .filter((key) => key.toLowerCase().includes(searchTerm?.toLowerCase()))}
        /></div>
      )}
    </div>
  );
}
13:T3a56,<span><span style="color: var(--shiki-token-string-expression)">&quot;use client&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { useEffect</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> useState } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;react&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> Header </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@/components/Header&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { fetchArNSRecords } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@/utils/arweave&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> RecordsGrid </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@/components/RecordsGrid&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Home</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">arnsRecords</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setArnsRecords</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useState</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// State for storing all ArNS records</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">isProcessing</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setIsProcessing</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useState</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// State for processing indicator</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">searchTerm</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setSearchTerm</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useState</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// used to filter displayed results by search input</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">address</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setAddress</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useState</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// State for wallet address</span></span>
<span><span style="color: var(--shiki-color-text)">  </span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">useEffect</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchRecords</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">allRecords</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchArNSRecords</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">setArnsRecords</span><span style="color: var(--shiki-color-text)">(allRecords);</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">setIsProcessing</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    };</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">fetchRecords</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> []);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-constant)">Header</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">address</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{address} </span><span style="color: var(--shiki-token-function)">setAddress</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{setAddress} /&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">      {isProcessing </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&quot;processing&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">      ) </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">          &lt;</span><span style="color: var(--shiki-token-string-expression)">h2</span><span style="color: var(--shiki-color-text)">&gt;Search&lt;/</span><span style="color: var(--shiki-token-string-expression)">h2</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">          &lt;</span><span style="color: var(--shiki-token-string-expression)">input</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">type</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;text&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">value</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{searchTerm}</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;search-bar&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">onChange</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {(e) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span><span style="color: var(--shiki-token-function)">setSearchTerm</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">e</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">target</span><span style="color: var(--shiki-color-text)">.value)}}</span></span>
<span><span style="color: var(--shiki-color-text)">          /&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;</span><span style="color: var(--shiki-token-constant)">RecordsGrid</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">keys</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{arnsRecords</span></span>
<span><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">((r) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">r</span><span style="color: var(--shiki-color-text)">.name)</span></span>
<span><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">((key) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-token-function)">.toLowerCase</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-function)">.includes</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">searchTerm</span><span style="color: var(--shiki-token-function)">?.toLowerCase</span><span style="color: var(--shiki-color-text)">()))}</span></span>
<span><span style="color: var(--shiki-color-text)">        /&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">      )}</span></span>
<span><span style="color: var(--shiki-color-text)">    &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">  );</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>14:T1624,import Header from "@/components/Header";
import { useParams, Link } from "arnext"; // Import from ARNext, not NextJS
import { useEffect, useState } from "react";
import { ARIO } from "@ar.io/sdk/web";
import { fetchRecordDetails, setANTRecord } from "@/utils/arweave";

export async function getStaticPaths() {
  return { paths: [], fallback: "blocking" };
}

export async function getStaticProps({ params }) {
  const { name } = params;
  return { props: { name } }; // No initial record, just returning name
}

export default function NamePage() {
  const { name } = useParams();
  const [nameState, setNameState] = useState("");
  const [nameRecord, setNameRecord] = useState(null); // Initialize record to null
  const [arnsRecord, setArnsRecord] = useState(null);
  const [resultMessage, setResultMessage] = useState("");
  const [address, setAddress] = useState(null); // State for wallet address

  useEffect(() => {
    if (name && name !== nameState) {
      setNameState(name);

      // Fetch the record dynamically whenever routeName changes
      const fetchRecord = async () => {
        console.log("fetching records");
        try {
          const ario = ARIO.init();
          const newRecord = await ario.getArNSRecord({ name });
          console.log(newRecord);
          setNameRecord(newRecord);
        } catch (error) {
          console.error("Failed to fetch record:", error);
          setRecord(null);
        }
      };

      fetchRecord();
    }
    if (nameRecord && nameRecord.processId) {
      const fetchArnsRecord = async () => {
        try {
          const arnsRecord = await fetchRecordDetails(nameRecord.processId);
          console.log(arnsRecord);
          setArnsRecord(arnsRecord);
        } catch (error) {
          console.error(error);
        }
      };
      fetchArnsRecord();
    }
  }, [nameState, nameRecord]);

  const handleUpdateRecord = async (key, txId) => {
    const result = await setANTRecord(nameRecord.processId, key, txId, 900)
  console.log(`result Message: ${result}`)
  console.log(result)
    setResultMessage(result.id)
  };

  if (nameRecord === null) {
    return (
      <div>
        <Header address={address} setAddress={setAddress} />
        <p>Loading...</p>
      </div>
    );
  }

  const owner = arnsRecord?.owner || "N/A";
  const controllers = arnsRecord?.controllers || [];

  return (
    <div>
      <Header address={address} setAddress={setAddress} />
      <div className="record-details">
        <h3>Record Details for {nameState}</h3>
        <div>
          {arnsRecord?.detailedRecords &&
            Object.keys(arnsRecord.detailedRecords).map((recordKey, index) => (
              <div key={index} className="record-txid">
                <strong>{recordKey}:</strong>{" "}
                <a
                  href={`https://arweave.net/${arnsRecord.detailedRecords[recordKey].transactionId}`}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {arnsRecord.detailedRecords[recordKey].transactionId}
                </a>
              </div>
            ))}
        </div>
        <p>Owner: {owner}</p>
        <p>
          Controllers: {controllers.length > 0 ? controllers.join(", ") : "N/A"}
        </p>
        {owner === address && ( 
          <>
            {arnsRecord?.detailedRecords &&
              Object.keys(arnsRecord.detailedRecords).map(
                (recordKey, index) => (
                  <div key={index} className="record-update">
                    <label>
                      {recordKey}:
                      <input
                        type="text"
                        placeholder="Enter new TxID"
                        id={`input-${index}`}
                      />
                      <button
                        onClick={() => {
                          const inputElement = document.getElementById(`input-${index}`);
                          const inputValue = inputElement ? inputElement.value : "";
                          handleUpdateRecord(
                            recordKey === "@" ? "@" : `${recordKey}`,
                            inputValue
                          );
                        }}
                      >
                        Update
                      </button>
                    </label>
                  </div>
                )
              )}
            <div className="new-record">
              <input
                type="text"
                placeholder="New Subdomain"
                id={`new-subdomain-input`}
              />
              <input
                type="text"
                placeholder="New TxID"
                id={`new-txid-input`}
              />
              <button
                onClick={() => {
                  const subdomainElement = document.getElementById("new-subdomain-input");
                  const txIdElement = document.getElementById("new-txid-input");
            
                  const newSubdomainValue = subdomainElement ? subdomainElement.value : "";
                  const newTxIdValue = txIdElement ? txIdElement.value : "";
            
                  console.log(newSubdomainValue)
                  console.log(newTxIdValue)
                  handleUpdateRecord(newSubdomainValue, newTxIdValue);
                }}
              >
                Set New Record
              </button>
            </div>
          </>
        )}
        <Link href="/">
          <button>Back to list</button>
        </Link>

        {resultMessage && <p>Successfully updated with message ID: {resultMessage}</p>}
      </div>
    </div>
  );
}
15:Td5cc,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> Header </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@/components/Header&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { useParams</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> Link } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;arnext&quot;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// Import from ARNext, not NextJS</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { useEffect</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> useState } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;react&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { ARIO } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@ar.io/sdk/web&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { fetchRecordDetails</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> setANTRecord } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@/utils/arweave&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getStaticPaths</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> { paths</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> []</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> fallback</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;blocking&quot;</span><span style="color: var(--shiki-color-text)"> };</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getStaticProps</span><span style="color: var(--shiki-color-text)">({ params }) {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)">name</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> params;</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> { props</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> { name } }; </span><span style="color: var(--shiki-token-comment)">// No initial record, just returning name</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">NamePage</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)">name</span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useParams</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">nameState</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setNameState</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useState</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">nameRecord</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setNameRecord</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useState</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// Initialize record to null</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">arnsRecord</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setArnsRecord</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useState</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">resultMessage</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setResultMessage</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useState</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">address</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setAddress</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useState</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// State for wallet address</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">useEffect</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> nameState) {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">setNameState</span><span style="color: var(--shiki-color-text)">(name);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// Fetch the record dynamically whenever routeName changes</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchRecord</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;fetching records&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ARIO</span><span style="color: var(--shiki-token-function)">.init</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newRecord</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ario</span><span style="color: var(--shiki-token-function)">.getArNSRecord</span><span style="color: var(--shiki-color-text)">({ name });</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(newRecord);</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">setNameRecord</span><span style="color: var(--shiki-color-text)">(newRecord);</span></span>
<span><span style="color: var(--shiki-color-text)">        } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Failed to fetch record:&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> error);</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">setRecord</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">        }</span></span>
<span><span style="color: var(--shiki-color-text)">      };</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fetchRecord</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (nameRecord </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nameRecord</span><span style="color: var(--shiki-color-text)">.processId) {</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchArnsRecord</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">arnsRecord</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchRecordDetails</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">nameRecord</span><span style="color: var(--shiki-color-text)">.processId);</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(arnsRecord);</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">setArnsRecord</span><span style="color: var(--shiki-color-text)">(arnsRecord);</span></span>
<span><span style="color: var(--shiki-color-text)">        } </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) {</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(error);</span></span>
<span><span style="color: var(--shiki-color-text)">        }</span></span>
<span><span style="color: var(--shiki-color-text)">      };</span></span>
<span><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fetchArnsRecord</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [nameState</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> nameRecord]);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">handleUpdateRecord</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> (key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> txId) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">setANTRecord</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">nameRecord</span><span style="color: var(--shiki-color-text)">.processId</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> txId</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">900</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`result Message: </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">result</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(result)</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">setResultMessage</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)">.id)</span></span>
<span><span style="color: var(--shiki-color-text)">  };</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (nameRecord </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;</span><span style="color: var(--shiki-token-constant)">Header</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">address</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{address} </span><span style="color: var(--shiki-token-function)">setAddress</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{setAddress} /&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;Loading...&lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">      &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">    );</span></span>
<span><span style="color: var(--shiki-color-text)">  }</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">owner</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">arnsRecord</span><span style="color: var(--shiki-color-text)">?.owner </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;N/A&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">controllers</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">arnsRecord</span><span style="color: var(--shiki-color-text)">?.controllers </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-constant)">Header</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">address</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{address} </span><span style="color: var(--shiki-token-function)">setAddress</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{setAddress} /&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;record-details&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;</span><span style="color: var(--shiki-token-string-expression)">h3</span><span style="color: var(--shiki-color-text)">&gt;Record Details for {nameState}&lt;/</span><span style="color: var(--shiki-token-string-expression)">h3</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">          {</span><span style="color: var(--shiki-token-constant)">arnsRecord</span><span style="color: var(--shiki-color-text)">?.detailedRecords </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">arnsRecord</span><span style="color: var(--shiki-color-text)">.detailedRecords)</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">((recordKey</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span><span style="color: var(--shiki-color-text)">              &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">key</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{index} </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;record-txid&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">                &lt;</span><span style="color: var(--shiki-token-string-expression)">strong</span><span style="color: var(--shiki-color-text)">&gt;{recordKey}:&lt;/</span><span style="color: var(--shiki-token-string-expression)">strong</span><span style="color: var(--shiki-color-text)">&gt;{</span><span style="color: var(--shiki-token-string-expression)">&quot; &quot;</span><span style="color: var(--shiki-color-text)">}</span></span>
<span><span style="color: var(--shiki-color-text)">                &lt;</span><span style="color: var(--shiki-token-string-expression)">a</span></span>
<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-function)">href</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{</span><span style="color: var(--shiki-token-string-expression)">`https://arweave.net/</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-constant)">arnsRecord</span><span style="color: var(--shiki-color-text)">.detailedRecords[recordKey].transactionId</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">}</span></span>
<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-function)">target</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;_blank&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-function)">rel</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;noopener noreferrer&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">                &gt;</span></span>
<span><span style="color: var(--shiki-color-text)">                  {</span><span style="color: var(--shiki-token-constant)">arnsRecord</span><span style="color: var(--shiki-color-text)">.detailedRecords[recordKey].transactionId}</span></span>
<span><span style="color: var(--shiki-color-text)">                &lt;/</span><span style="color: var(--shiki-token-string-expression)">a</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">              &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">            ))}</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;Owner: {owner}&lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">          Controllers: {</span><span style="color: var(--shiki-token-constant)">controllers</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">controllers</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;, &quot;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;N/A&quot;</span><span style="color: var(--shiki-color-text)">}</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">        {owner </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> address </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> ( </span></span>
<span><span style="color: var(--shiki-color-text)">          &lt;&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">            {</span><span style="color: var(--shiki-token-constant)">arnsRecord</span><span style="color: var(--shiki-color-text)">?.detailedRecords </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">arnsRecord</span><span style="color: var(--shiki-color-text)">.detailedRecords)</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">                (recordKey</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span><span style="color: var(--shiki-color-text)">                  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">key</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{index} </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;record-update&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">                    &lt;</span><span style="color: var(--shiki-token-string-expression)">label</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">                      {recordKey}:</span></span>
<span><span style="color: var(--shiki-color-text)">                      &lt;</span><span style="color: var(--shiki-token-string-expression)">input</span></span>
<span><span style="color: var(--shiki-color-text)">                        </span><span style="color: var(--shiki-token-function)">type</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;text&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">                        </span><span style="color: var(--shiki-token-function)">placeholder</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;Enter new TxID&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">                        </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{</span><span style="color: var(--shiki-token-string-expression)">`input-</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">index</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">}</span></span>
<span><span style="color: var(--shiki-color-text)">                      /&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">                      &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span></span>
<span><span style="color: var(--shiki-color-text)">                        </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">                          </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">inputElement</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.getElementById</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`input-</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">index</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">                          </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">inputValue</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> inputElement </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">inputElement</span><span style="color: var(--shiki-color-text)">.value </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">                          </span><span style="color: var(--shiki-token-function)">handleUpdateRecord</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">                            recordKey </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">recordKey</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">                            inputValue</span></span>
<span><span style="color: var(--shiki-color-text)">                          );</span></span>
<span><span style="color: var(--shiki-color-text)">                        }}</span></span>
<span><span style="color: var(--shiki-color-text)">                      &gt;</span></span>
<span><span style="color: var(--shiki-color-text)">                        Update</span></span>
<span><span style="color: var(--shiki-color-text)">                      &lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">                    &lt;/</span><span style="color: var(--shiki-token-string-expression)">label</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">                  &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">                )</span></span>
<span><span style="color: var(--shiki-color-text)">              )}</span></span>
<span><span style="color: var(--shiki-color-text)">            &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;new-record&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">              &lt;</span><span style="color: var(--shiki-token-string-expression)">input</span></span>
<span><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">type</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;text&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">placeholder</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;New Subdomain&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{</span><span style="color: var(--shiki-token-string-expression)">`new-subdomain-input`</span><span style="color: var(--shiki-color-text)">}</span></span>
<span><span style="color: var(--shiki-color-text)">              /&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">              &lt;</span><span style="color: var(--shiki-token-string-expression)">input</span></span>
<span><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">type</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;text&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">placeholder</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;New TxID&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{</span><span style="color: var(--shiki-token-string-expression)">`new-txid-input`</span><span style="color: var(--shiki-color-text)">}</span></span>
<span><span style="color: var(--shiki-color-text)">              /&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">              &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span></span>
<span><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">subdomainElement</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.getElementById</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;new-subdomain-input&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">txIdElement</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.getElementById</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;new-txid-input&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">            </span></span>
<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newSubdomainValue</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> subdomainElement </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">subdomainElement</span><span style="color: var(--shiki-color-text)">.value </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newTxIdValue</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> txIdElement </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">txIdElement</span><span style="color: var(--shiki-color-text)">.value </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">            </span></span>
<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(newSubdomainValue)</span></span>
<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(newTxIdValue)</span></span>
<span><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-function)">handleUpdateRecord</span><span style="color: var(--shiki-color-text)">(newSubdomainValue</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> newTxIdValue);</span></span>
<span><span style="color: var(--shiki-color-text)">                }}</span></span>
<span><span style="color: var(--shiki-color-text)">              &gt;</span></span>
<span><span style="color: var(--shiki-color-text)">                Set New Record</span></span>
<span><span style="color: var(--shiki-color-text)">              &lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">            &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">          &lt;/&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">        )}</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;</span><span style="color: var(--shiki-token-constant)">Link</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">href</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">          &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;Back to list&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;/</span><span style="color: var(--shiki-token-constant)">Link</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">        {resultMessage </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;Successfully updated with message ID: {resultMessage}&lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;}</span></span>
<span><span style="color: var(--shiki-color-text)">      &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">    &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">  );</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>16:T1bc3,<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> React </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;react&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { Link } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;arnext&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">/**</span></span>
<span><span style="color: var(--shiki-token-comment)"> * RecordsGrid component for displaying a grid of record keys.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@param</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{Object}</span><span style="color: var(--shiki-token-comment)"> props - Component props.</span></span>
<span><span style="color: var(--shiki-token-comment)"> * </span><span style="color: var(--shiki-token-keyword)">@param</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{Array&lt;string&gt;}</span><span style="color: var(--shiki-token-comment)"> props.keys - Array of record keys to display.</span></span>
<span><span style="color: var(--shiki-token-comment)"> */</span></span>
<span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RecordsGrid</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ({ keys }) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;records-grid&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">      {</span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">((key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;</span><span style="color: var(--shiki-token-constant)">Link</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">href</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{</span><span style="color: var(--shiki-token-string-expression)">`/names/</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">key</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">} </span><span style="color: var(--shiki-token-function)">key</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{index}&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">key</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{index}</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;record-key&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">`clicked on </span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-color-text)">key</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">`</span><span style="color: var(--shiki-color-text)">)}}</span></span>
<span><span style="color: var(--shiki-color-text)">        &gt;</span></span>
<span><span style="color: var(--shiki-color-text)">          {key}</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">        &lt;/</span><span style="color: var(--shiki-token-constant)">Link</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">      ))}</span></span>
<span><span style="color: var(--shiki-color-text)">    &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">  );</span></span>
<span><span style="color: var(--shiki-color-text)">};</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> RecordsGrid;</span></span>
<span></span>0:{"P":null,"b":"dTzWT_or4FV4q24zBhnra","p":"/docs","c":["","build","guides","arns-viewer",""],"i":false,"f":[[["",{"children":["build",{"children":["guides",{"children":["arns-viewer",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$2","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/docs/_next/static/css/8a4f4ef9baffb577.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],"$L3"]}],{"children":["build",["$","$2","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","build","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":["guides",["$","$2","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","build","children","guides","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":["arns-viewer",["$","$2","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","build","children","guides","children","arns-viewer","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":["__PAGE__",["$","$2","c",{"children":[["$","article",null,{"className":"flex h-full flex-col pb-10 pt-16","children":[["$","div",null,{"className":"flex-auto prose dark:prose-invert [html_:where(&>*)]:mx-auto [html_:where(&>*)]:max-w-2xl [html_:where(&>*)]:lg:mx-[calc(50%-min(50%,theme(maxWidth.lg)))] [html_:where(&>*)]:lg:max-w-3xl","children":[["$","h1",null,{"children":"ArNS Viewer"}],"\n",["$","$L6",null,{"level":2,"id":"overview","children":"Overview"}],"\n",["$","p",null,{"children":"This guide will walk you through creating a project that uses the ar.io SDK to interact with ArNS names in a web environment. It provides all the steps and context needed to help you get up and running smoothly, allowing you to effectively use these technologies."}],"\n",["$","p",null,{"children":["We will be using ",["$","$L7",null,{"href":"https://github.com/weavedb/arnext","children":"ARNext"}],", a new framework based on Next.js, to simplify deployment to the Arweave permaweb. ARNext provides flexibility for deploying seamlessly to Arweave using an ArNS name, an Arweave transaction ID, or traditional services like Vercel—all without requiring major code modifications. This means you can deploy the same project across different environments with minimal effort."]}],"\n",["$","p",null,{"children":"The guide will focus on the following core functionalities of the ar.io SDK:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Retrieving a List of All Active ArNS Names"}],": Learn how to use the SDK to get and display a list of active ArNS names."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Querying Detailed Records for a Specific ArNS Name"}],": Learn how to access detailed records for a specific ArNS name using its ANT (Arweave Name Token)."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Updating and Creating Records on an ArNS Name"}],": Learn how to modify and add records to an ArNS name, showcasing the capabilities of ANT for dynamic web content."]}],"\n"]}],"\n",["$","p",null,{"children":"By the end of this guide, you will have a complete, functional project that not only demonstrates how to use the ar.io SDK but also shows the ease and flexibility of deploying applications to the Arweave permaweb. Whether you are an experienced developer or just starting out, this guide will help you understand the key aspects of building and deploying on Arweave."}],"\n",["$","$L6",null,{"level":2,"id":"getting-started","children":"Getting Started"}],"\n",["$","h3",null,{"children":"Prerequisites"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Node v20.17 or greater"}],"\n",["$","li",null,{"children":"git"}],"\n"]}],"\n",["$","h3",null,{"children":"Install ARNext"}],"\n",["$","p",null,{"children":"ARNext is a brand new framework that is still in development. It supports installation using npx, and you will need the proper Node version for the installation to be successful."}],"\n",["$","$L8",null,{"language":"bash","code":"npx create-arnext-app arnext\n\n","children":["$","$L9",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">npx</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">create-arnext-app</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">arnext</span></span>\n<span></span>\n<span></span>"}]}],"\n",["$","p",null,{"children":"You can then move your terminal into that newly created folder with:"}],"\n",["$","$L8",null,{"language":"bash","code":"cd arnext\n","children":["$","$L9",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">cd</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">arnext</span></span>\n<span></span>"}]}],"\n",["$","p",null,{"children":"or open the folder in an IDE like VSCode, and open a new terminal inside that IDE in order to complete the next steps."}],"\n",["$","h3",null,{"children":"Sanity Check"}],"\n",["$","p",null,{"children":"It is good practice when starting a new project to view it in localhost without any changes, to make sure everything is installed and working correctly. To do this, run:"}],"\n",["$","$L8",null,{"language":"bash","code":"npm run dev\n","children":["$","$L9",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">npm</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">run</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">dev</span></span>\n<span></span>"}]}],"\n",["$","p",null,{"children":"or, if you prefer yarn:"}],"\n",["$","$L8",null,{"language":"bash","code":"yarn dev\n","children":["$","$L9",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">yarn</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">dev</span></span>\n<span></span>"}]}],"\n",["$","p",null,{"language":"txt","children":["By default, the project will be served on port 3000, so you can access it by navigating to ",["$","$L9",null,{"children":"localhost:3000"}]," in any browser. You should see something that looks like this:"]}],"\n",["$","img",null,{"className":"demoImage","src":"https://arweave.net/irRwKfKZ4JsvZrjx7orkuDoQ9BqQWoJoIZKikkQVcLE"}],"\n",["$","p",null,{"children":"With this complete, you are ready to move on to customizing for your own project."}],"\n",["$","$L6",null,{"level":2,"id":"install-ar-io-sdk","children":"Install ar.io SDK"}],"\n",["$","p",null,{"children":"Next, install the ar.io SDK."}],"\n",["$","$L8",null,{"language":"bash","code":"npm install @ar.io/sdk\n","children":["$","$L9",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">npm</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">install</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">@ar.io/sdk</span></span>\n<span></span>"}]}],"\n",["$","p",null,{"children":"or"}],"\n",["$","$L8",null,{"language":"bash","code":"yarn add @ar.io/sdk --ignore-engines\n","children":["$","$L9",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">yarn</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">add</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">@ar.io/sdk</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">--ignore-engines</span></span>\n<span></span>"}]}],"\n",["$","h3",null,{"children":"Polyfills"}],"\n",["$","p",null,{"language":"txt","children":["Polyfills are used to provide missing functionality in certain environments. For example, browsers do not have direct access to a computer's file system, but many JavaScript libraries are designed to work in both browser and Node.js environments. These libraries might include references to ",["$","$L9",null,{"children":"fs"}],", the module used by Node.js to interact with the file system. Since fs is not available in browsers, we need a polyfill to handle these references and ensure the application runs properly in a browser environment."]}],"\n",["$","p",null,{"style":{"display":"none"},"children":"Polyfills are actually evil voodoo curse magic. No one understands what they are or how they work, but front end devs sell their souls to Bill Gates in exchange for their stuff working properly in browsers. The below polyfill instructions were stolen, at great personal cost, from one of these front end devs in order to save your soul. This is one of many convenient services offered by ar.io"}],"\n",["$","h4",null,{"children":"Installation"}],"\n",["$","p",null,{"children":"The below command will install several packages as development dependencies, which should be sufficient to handle most polyfill needs for projects that interact with Arweave."}],"\n",["$","$L8",null,{"language":"bash","code":"npm install webpack browserify-fs process buffer --save-dev\n","children":["$","$L9",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">npm</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">install</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">webpack</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">browserify-fs</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">process</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">buffer</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">--save-dev</span></span>\n<span></span>"}]}],"\n",["$","p",null,{"children":"or"}],"\n",["$","$L8",null,{"language":"bash","code":"yarn add webpack browserify-fs process buffer --dev --ignore-engines\n","children":["$","$L9",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">yarn</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">add</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">webpack</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">browserify-fs</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">process</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">buffer</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">--dev</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">--ignore-engines</span></span>\n<span></span>"}]}],"\n",["$","h4",null,{"children":"Next Config"}],"\n",["$","p",null,{"language":"txt","children":["With the polyfill packages installed, we need to tell our app how to use them. In NextJS, which ARNext is built on, this is done in the ",["$","$L9",null,{"children":"next.config.js"}]," file in the root of the project. The default config file will look like this:"]}],"\n",["$","$L8",null,{"language":"typescript","code":"const arnext = require(\"arnext/config\")\nconst nextConfig = { reactStrictMode: true }\nmodule.exports = arnext(nextConfig)\n","children":["$","$L9",null,{"className":"language-typescript","children":"$a"}]}],"\n",["$","p",null,{"language":"txt","children":["This configuration allows the app to determine if it is being served via an Arweave transaction Id, or through a more traditional method. From here, we need to add in the additional configurations for resolving our polyfills. The updated ",["$","$L9",null,{"children":"next.config.js"}]," will look like this:"]}],"\n",["$","$L8",null,{"language":"typescript","code":"const arnext = require(\"arnext/config\");\nconst webpack = require(\"webpack\");\n\nconst nextConfig = {\n  reactStrictMode: true,\n  webpack: (config) => {\n    config.resolve.fallback = {\n      ...config.resolve.fallback,\n      fs: false,\n      process: \"process/browser\",\n      buffer: \"buffer/\",\n    };\n    config.plugins.push(\n      new webpack.ProvidePlugin({\n        process: \"process/browser\",\n        Buffer: [\"buffer\", \"Buffer\"],\n      })\n    );\n    return config;\n  },\n};\nmodule.exports = arnext(nextConfig);\n","children":["$","$L9",null,{"className":"language-typescript","children":"$b"}]}],"\n",["$","p",null,{"children":"With that, you are ready to start customizing your app."}],"\n",["$","$L6",null,{"level":2,"id":"strip-default-content","children":"Strip Default Content"}],"\n",["$","p",null,{"children":"The first step in building your custom app is to remove the default content and create a clean slate. Follow these steps:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":["$","strong",null,{"children":"Update the Home Page"}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":["Navigate to ",["$","$L9",null,{"children":"pages > index.js"}],", which serves as the main home page."]}],"\n",["$","li",null,{"children":"Delete everything in this file and replace it with the following placeholder:"}],"\n"]}],"\n",["$","$L8",null,{"language":"typescript","code":"export default function Home() {}\n","children":["$","$L9",null,{"className":"language-typescript","children":"<span><span style=\"color: var(--shiki-token-keyword)\">export</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">default</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">function</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">Home</span><span style=\"color: var(--shiki-color-text)\">() {}</span></span>\n<span></span>"}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":["$","strong",null,{"children":"Remove Unused Pages"}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":["The folder ",["$","$L9",null,{"children":"pages > posts > [id].js"}]," will not be used in this project. Delete the entire ",["$","$L9",null,{"children":"posts"}]," folder to keep the project organized and free of unnecessary files."]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":["$","strong",null,{"children":"Create Header"}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":["Create a new ",["$","$L9",null,{"children":"components"}]," folder"]}],"\n",["$","li",null,{"language":"txt","children":["Inside that, create a ",["$","$L9",null,{"children":"Header.js"}]," file, leave it blank for now."]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":["$","strong",null,{"children":"Create Routes"}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":["Create a new file at ",["$","$L9",null,{"children":"components > ArweaveRoutes.js"}]," to handle routing between pages. Leave it simple for now."]}],"\n"]}],"\n",["$","$L8",null,{"language":"typescript","code":"import { Routes, Route } from \"react-router-dom\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport Home from \"../pages/index\";\nimport NotFound from \"../pages/404\";\n\nconst ArweaveRoutes = () => (\n  <Routes>\n    <Route path=\"/\" element={<Home />} />\n    <Route path=\"*\" element={<NotFound />} />\n  </Routes>\n);\n\nexport default ArweaveRoutes;\n","children":["$","$L9",null,{"className":"language-typescript","children":"$c"}]}],"\n"]}],"\n"]}],"\n",["$","p",null,{"children":"Your project is now a blank slate, ready for your own custom design and functionality. This clean setup will make it easier to build and maintain your application as you move forward."}],"\n",["$","$L6",null,{"level":2,"id":"add-utilities","children":"Add Utilities"}],"\n",["$","p",null,{"language":"txt","children":["There are a few functions that we might end up wanting to use in multiple different pages in our finished product. So we can put these in a separate file and export them, so that other pages can import them to use. Start by creating a ",["$","$L9",null,{"children":"utils"}]," folder in the root of the project, then create 2 files inside of it:"]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":[["$","$L9",null,{"children":"auth.js"}],": This will contain the functions required for connecting an Arweave wallet using ArConnect"]}],"\n",["$","$L8",null,{"language":"typescript","code":"/**\n * Connect to the Arweave wallet using ArConnect and request permissions.\n * @returns {Promise<string>} The active wallet address.\n */\nexport const connectWallet = async () => {\n  await window.arweaveWallet.connect([\n    \"ACCESS_ADDRESS\",\n    \"SIGN_TRANSACTION\",\n    \"ACCESS_PUBLIC_KEY\",\n    \"SIGNATURE\",\n  ]);\n  const address = await window.arweaveWallet.getActiveAddress();\n  return address;\n};\n\n/**\n * Truncate a wallet address for display purposes.\n * @param {string} address - The wallet address to truncate.\n * @returns {string} The truncated address.\n */\nexport const truncateAddress = (address) => {\n  return `${address.slice(0, 3)}...${address.slice(-3)}`;\n};\n","children":["$","$L9",null,{"className":"language-typescript","children":"$d"}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":[["$","$L9",null,{"children":"arweave.js"}],": This is where we will put most of our ar.io SDK functions for interacting with Arweave"]}],"\n",["$","$L8",null,{"language":"typescript","code":"$e","children":["$","$L9",null,{"className":"language-typescript","children":"$f"}]}],"\n"]}],"\n"]}],"\n",["$","$L6",null,{"level":2,"id":"build-home-page","children":"Build Home Page"}],"\n",["$","h3",null,{"children":"Header"}],"\n",["$","p",null,{"language":"txt","children":["We want the Header component to contain a button for users to connect their wallet to the site, and display their wallet address when Connected. To do this, we will use the functions we exported from the ",["$","$L9",null,{"children":"utils > auth.js"}]," file, and pass in a state and set state function from each page rendering the header:"]}],"\n",["$","$L8",null,{"language":"typescript","code":"import React from \"react\";\nimport { connectWallet, truncateAddress } from \"../utils/auth\";\n\n/**\n * Header component for displaying the connect wallet button and navigation.\n * @param {Object} props - Component props.\n * @param {string} props.address - The connected wallet address.\n * @param {function} props.setAddress - Function to set the connected wallet address.\n */\nconst Header = ({ address, setAddress }) => {\n  const handleConnectWallet = async () => {\n    try {\n      const walletAddress = await connectWallet();\n      setAddress(walletAddress);\n    } catch (error) {\n      console.error(\"Failed to connect wallet:\", error);\n    }\n  };\n\n  return (\n    <div className=\"header\">\n      <button className=\"connect-wallet\" onClick={handleConnectWallet}>\n        {address ? `Connected: ${truncateAddress(address)}` : \"Connect Wallet\"}\n      </button>\n    </div>\n  );\n};\n\nexport default Header;\n","children":["$","$L9",null,{"className":"language-typescript","children":"$10"}]}],"\n",["$","$L6",null,{"level":2,"id":"grid-component","children":"Grid Component"}],"\n",["$","p",null,{"children":"Our home page is going to fetch a list of all ArNS names and display them. To make this display cleaner and more organized, we are going to create a component to display the names as a grid."}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":["Create a new file in ",["$","$L9",null,{"children":"components"}]," named ",["$","$L9",null,{"children":"RecordsGrid.js"}]]}],"\n"]}],"\n",["$","$L8",null,{"language":"javascript","code":"import React from \"react\";\nimport { Link } from \"arnext\";\n\n/**\n * RecordsGrid component for displaying a grid of record keys.\n * @param {Object} props - Component props.\n * @param {Array<string>} props.keys - Array of record keys to display.\n */\nconst RecordsGrid = ({ keys }) => {\n  return (\n    <div className=\"records-grid\">\n      {keys.map((key, index) => (\n        <button\n          key={index}\n          className=\"record-key\"\n          onClick={() => {\n            console.log(`clicked on ${key}`); \n          }}\n        >\n          {key}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default RecordsGrid;\n","children":["$","$L9",null,{"className":"language-javascript","children":"$11"}]}],"\n",["$","p",null,{"language":"txt","children":["This will take an individual ArNS record and display it as a button that logs the record name when clicked. We will update this later to make the button act as a link to the more detailed record page after we build that, which is why we are importing ",["$","$L9",null,{"children":"Link"}]," from ",["$","$L9",null,{"children":"arnext"}]]}],"\n",["$","$L6",null,{"level":2,"id":"home-page","children":"Home Page"}],"\n",["$","p",null,{"language":"txt","children":["Go back to ",["$","$L9",null,{"children":"pages > index.js"}]," and lets build out our home page. We want to fetch the list of ArNS names when the page loads, and then feed the list into the grid component we just created. Because there are so many names, we also want to include a simple search bar to filter out displayed names. We will also need several states in order to manage all of this info:"]}],"\n",["$","$L8",null,{"language":"javascript","code":"$12","children":["$","$L9",null,{"className":"language-javascript","children":"$13"}]}],"\n",["$","$L6",null,{"level":2,"id":"names-page","children":"Names Page"}],"\n",["$","p",null,{"language":"txt","children":["NextJS, and ARNext by extension, supports dynamic routing, allowing us to create dedicated pages for any ArNS name without needing to use query strings, which makes the sharable urls much cleaner and more intuitive. We can do this by creating a page file with the naming convention ",["$","$L9",null,{"children":"[variable].js"}],". Since we want to make a page for specific ArNS names we will create a new folder inside the ",["$","$L9",null,{"children":"pages"}]," folder named ",["$","$L9",null,{"children":"names"}],", and then a new file ",["$","$L9",null,{"children":"pages > names > [name].js"}],"."]}],"\n",["$","p",null,{"language":"txt","children":["This will be our largest file so far, including different logic for the displayed content depending on if the connected wallet is authorized to make changes the the name. We also need to make the page see what the name being looked at is, based on the url. We can do this using the custom ",["$","$L9",null,{"children":"useParams"}]," function from ARNext."]}],"\n",["$","p",null,{"children":"The finished page will look like this:"}],"\n",["$","$L8",null,{"language":"javascript","code":"$14","children":["$","$L9",null,{"className":"language-javascript","children":"$15"}]}],"\n",["$","p",null,{"language":"txt","children":["When this page loads, it gets the name being queried by using ",["$","$L9",null,{"children":"useParams"}]," and our custom ",["$","$L9",null,{"children":"getStaticPaths"}]," and ",["$","$L9",null,{"children":"getStaticProps"}]," functions. It then uses the ar.io sdk to get the process Id of the ANT that controls the name, and queries the ANT for its info and detailed records list."]}],"\n",["$","p",null,{"children":"Once the page has that info, it renders the ArNS name, its owner address, any addresses authorized to make changes, and every record that name contains. If the user has connected a wallet authorized to make changes, the page also renders input fields for each record for making those updates. It also provides the option to create an entirely new undername record."}],"\n",["$","$L6",null,{"level":2,"id":"finish-the-grid-component","children":"Finish the Grid Component"}],"\n",["$","p",null,{"language":"txt","children":["Now that we have a path for our main page displays to link to, we can update the ",["$","$L9",null,{"children":"components > RecordsGrid.js"}]," file to include that link when clicked."]}],"\n",["$","$L8",null,{"language":"javascript","code":"import React from \"react\";\nimport { Link } from \"arnext\";\n\n/**\n * RecordsGrid component for displaying a grid of record keys.\n * @param {Object} props - Component props.\n * @param {Array<string>} props.keys - Array of record keys to display.\n */\nconst RecordsGrid = ({ keys }) => {\n  return (\n    <div className=\"records-grid\">\n      {keys.map((key, index) => (\n        <Link href={`/names/${key}`} key={index}>\n        <button\n          key={index}\n          className=\"record-key\"\n          onClick={() => {console.log(`clicked on ${key}`)}}\n        >\n          {key}\n        </button>\n        </Link>\n      ))}\n    </div>\n  );\n};\n\nexport default RecordsGrid;\n","children":["$","$L9",null,{"className":"language-javascript","children":"$16"}]}],"\n",["$","$L6",null,{"level":2,"id":"view-project","children":"View Project"}],"\n",["$","p",null,{"children":["The ArNS viewer should be fully functional now. You can view it locally in your browser using the same steps as the initial ",["$","$L7",null,{"href":"#sanity-check","children":"Sanity Check"}]]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":["Run ",["$","$L9",null,{"children":"yarn dev"}]," in your terminal"]}],"\n",["$","li",null,{"language":"txt","children":["Navigate to ",["$","$L9",null,{"children":"localhost:3000"}]," in a browser"]}],"\n"]}],"\n",["$","$L6",null,{"level":2,"id":"css","children":"CSS"}],"\n",["$","p",null,{"children":"You will likely notice that everything functions correctly, but it doesnt look very nice. This is because we havent updated our css at all."}],"\n",["$","p",null,{"language":"txt","children":["The primary css file for this project is ",["$","$L9",null,{"children":"css > App.css"}],". You can make whatever css rules here that you like to make the page look the way you want."]}],"\n",["$","img",null,{"className":"demoImage","src":"https://arweave.net/VZGmzcLwNn-x9lKDpUdlLGyW81Xnnq5lNuD341XZEtY"}],"\n",["$","$L6",null,{"level":2,"id":"deploy-with-turbo","children":"Deploy With Turbo"}],"\n",["$","p",null,{"children":["Once your app is looking the way you want it, you can deploy it to the permaweb using Turbo. For this, you will need an Arweave wallet with some ",["$","$L7",null,{"href":"https://docs.ardrive.io/docs/turbo/credits/","children":"Turbo Credits"}],". Make sure you don't place your keyfile for the wallet inside the project directory, or you risk it getting uploaded to Arweave by mistake."]}],"\n",["$","p",null,{"children":"In your terminal, run the command:"}],"\n",["$","$L8",null,{"language":"bash","code":"yarn deploy:turbo -w <path-to-your-wallet>\n","children":["$","$L9",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">yarn</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">deploy:turbo</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">-w</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">&lt;</span><span style=\"color: var(--shiki-token-string)\">path-to-your-walle</span><span style=\"color: var(--shiki-color-text)\">t</span><span style=\"color: var(--shiki-token-keyword)\">&gt;</span></span>\n<span></span>"}]}],"\n",["$","p",null,{"language":"txt","children":["Make sure to replace ",["$","$L9",null,{"children":"<path-to-your-wallet>"}]," with the actual path to your Arweave wallet. This will create a static build of your entire project, upload it to Arweave, and print out in the terminal all of the details of the upload."]}],"\n",["$","p",null,{"language":"txt","children":["Find the section in the print out ",["$","$L9",null,{"children":"manifestResponse"}]," which will have a key named ",["$","$L9",null,{"children":"id"}],". That will be the Arweave transaction id for your project."]}],"\n",["$","p",null,{"language":"txt","children":["You can view a permanently deployed version of your project at ",["$","$L9",null,{"children":"https://arweave.net/<transaction-id>"}]]}],"\n",["$","$L6",null,{"level":2,"id":"references","children":"References"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["Completed Project example: ",["$","$L7",null,{"href":"https://github.com/Bobinstein/arnext","children":"github"}]]}],"\n",["$","li",null,{"children":["Deployed Project: ",["$","$L7",null,{"href":"https://arweave.net/ePbdRQrSyOqOVm3GhqmtGK2jm4fUf7Ohd3cJ9yNu-Y8/","children":"transaction id"}]]}],"\n"]}]]}],["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl","children":["$","$L17",null,{}]}]]}],null,["$","$L18",null,{"children":"$L19"}]]}],{},null]},null]},null]},null]},null],["$","$2","h",{"children":[null,["$","$2","EVNvo1DT1AxqyCOlV_lqc",{"children":[["$","$L1a",null,{"children":"$L1b"}],["$","$L1c",null,{"children":"$L1d"}],null]}]]}]]],"m":"$undefined","G":["$1e","$undefined"],"s":false,"S":true}
1d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
1b:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Protocol API Reference"}],["$","link","2",{"rel":"icon","href":"/docs/favicon.ico","type":"image/x-icon","sizes":"48x48"}]]
19:null
1f:I[8534,["4839","static/chunks/4839-2c43e538f3c20b25.js","5725","static/chunks/5725-75c60c391537bd29.js","8070","static/chunks/8070-7da9c315fd20a672.js","9247","static/chunks/9247-d1d8b3cf60de3aab.js","7177","static/chunks/app/layout-be9a85e73c9a5fb9.js"],"Providers"]
20:I[8808,["4839","static/chunks/4839-2c43e538f3c20b25.js","5725","static/chunks/5725-75c60c391537bd29.js","8070","static/chunks/8070-7da9c315fd20a672.js","9247","static/chunks/9247-d1d8b3cf60de3aab.js","7177","static/chunks/app/layout-be9a85e73c9a5fb9.js"],"Layout"]
3:["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L1f",null,{"children":["$","div",null,{"className":"w-full","children":["$","$L20",null,{"allSections":{"/":[],"/community-resources":[],"/build/ar-io-sdk":[{"title":"Overview","id":"overview"},{"title":"ar.io Network","id":"ar-io-network"},{"title":"Gateways","id":"gateways"},{"title":"IO Token","id":"io-token"},{"title":"ArNS","id":"ar-ns"}],"/build/gateways":[{"title":"Overview","id":"overview"},{"title":"AR.IO Gateway Benefits","id":"ar-io-gateway-benefits"},{"title":"Gateway Modularity","id":"gateway-modularity"},{"title":"ARNS Indexing and Routing","id":"arns-indexing-and-routing"},{"title":"Content Moderation","id":"content-moderation"}],"/learn/foundation":[{"title":"What is the AR.IO Foundation?","id":"what-is-the-ar-io-foundation"},{"title":"Guiding Philosophy","id":"guiding-philosophy"}],"/learn/glossary":[{"title":"aoComputer (AO):","id":"ao-computer-ao"},{"title":"Arweave Name System (ArNS):","id":"arweave-name-system-ar-ns"},{"title":"Arweave Name Token (ANT), “Name Token”:","id":"arweave-name-token-ant-name-token"},{"title":"Arweave Network Standards (ANS):","id":"arweave-network-standards-ans"},{"title":"Base Layer Transaction:","id":"base-layer-transaction"},{"title":"Bundle, bundling:","id":"bundle-bundling"},{"title":"Bundled Data Item (BDI):","id":"bundled-data-item-bdi"},{"title":"Bundler:","id":"bundler"},{"title":"Chunk:","id":"chunk"},{"title":"Decentralized, decentralization, etc:","id":"decentralized-decentralization-etc"},{"title":"Epoch:","id":"epoch"},{"title":"Gateway:","id":"gateway"},{"title":"Gateway Address Registry (GAR):","id":"gateway-address-registry-gar"},{"title":"Indexing:","id":"indexing"},{"title":"Layer 2 Infrastructure:","id":"layer-2-infrastructure"},{"title":"Manifest (aka Path Manifest, Arweave Manifest):","id":"manifest-aka-path-manifest-arweave-manifest"},{"title":"Mempool:","id":"mempool"},{"title":"Miner (aka Arweave Node):","id":"miner-aka-arweave-node"},{"title":"Native Address:","id":"native-address"},{"title":"Normalized Address:","id":"normalized-address"},{"title":"Observer:","id":"observer"},{"title":"Optimistic Indexing:","id":"optimistic-indexing"},{"title":"Owner:","id":"owner"},{"title":"Owner Address:","id":"owner-address"},{"title":"Period:","id":"period"},{"title":"Permaweb:","id":"permaweb"},{"title":"Protocol Balance:","id":"protocol-balance"},{"title":"Protocol Rewards:","id":"protocol-rewards"},{"title":"Public Key:","id":"public-key"},{"title":"Seeding:","id":"seeding"},{"title":"Staking (of tokens):","id":"staking-of-tokens"},{"title":"Transaction ID (txID):","id":"transaction-id-tx-id"},{"title":"Trust-minimization:","id":"trust-minimization"},{"title":"Vault:","id":"vault"}],"/learn/introduction":[{"title":"TL;DR","id":"tl-dr"},{"title":"What is AR.IO","id":"what-is-ar-io"},{"title":"Why AR.IO ?","id":"why-ar-io"}],"/learn/labs":[{"title":"What is AR.IO Labs?","id":"what-is-ar-io-labs"}],"/learn/token":[{"title":"Overview","id":"overview"}],"/build/ar-io-sdk/ANTs":[],"/build/ar-io-sdk/APIs":[],"/build/ar-io-sdk/ario":[],"/build/ar-io-sdk/configurations":[],"/build/ar-io-sdk/examples":[],"/build/ar-io-sdk/getting-started":[{"title":"Prerequisites","id":"prerequisites"},{"title":"Installation","id":"installation"},{"title":"Quick Start","id":"quick-start"}],"/build/ar-io-sdk/logging":[],"/build/ar-io-sdk/pagination":[],"/build/ar-io-sdk/release-notes":[{"title":"Overview","id":"overview"},{"title":"[2.3.2] (2024-10-16)","id":"2-3-2-2024-10-16"},{"title":"[2.3.1] (2024-10-09)","id":"2-3-1-2024-10-09"},{"title":"[2.2.5] (2024-09-26)","id":"2-2-5-2024-09-26"},{"title":"[2.2.4] (2024-09-26)","id":"2-2-4-2024-09-26"},{"title":"[2.2.3] (2024-09-25)","id":"2-2-3-2024-09-25"},{"title":"[2.2.2] (2024-09-23)","id":"2-2-2-2024-09-23"},{"title":"[2.2.1] (2024-09-16)","id":"2-2-1-2024-09-16"},{"title":"[2.2.0] (2024-08-30)","id":"2-2-0-2024-08-30"},{"title":"[2.1.0] (2024-08-07)","id":"2-1-0-2024-08-07"},{"title":"[2.0.2] (2024-07-12)","id":"2-0-2-2024-07-12"},{"title":"[2.0.1] (2024-07-11)","id":"2-0-1-2024-07-11"},{"title":"[1.2.2] (2024-07-11)","id":"1-2-2-2024-07-11"},{"title":"[1.2.1] (2024-07-04)","id":"1-2-1-2024-07-04"},{"title":"[1.2.0] (2024-07-03)","id":"1-2-0-2024-07-03"},{"title":"[1.1.1] (2024-06-06)","id":"1-1-1-2024-06-06"},{"title":"[1.1.0] (2024-06-03)","id":"1-1-0-2024-06-03"},{"title":"[1.0.8] (2024-05-29)","id":"1-0-8-2024-05-29"},{"title":"[1.0.7] (2024-05-23)","id":"1-0-7-2024-05-23"},{"title":"[1.0.6] (2024-05-07)","id":"1-0-6-2024-05-07"},{"title":"[1.0.5] (2024-05-02)","id":"1-0-5-2024-05-02"},{"title":"[1.0.4] (2024-04-30)","id":"1-0-4-2024-04-30"},{"title":"[1.0.3] (2024-04-26)","id":"1-0-3-2024-04-26"},{"title":"[1.0.2] (2024-04-25)","id":"1-0-2-2024-04-25"},{"title":"[1.0.1] (2024-04-23)","id":"1-0-1-2024-04-23"},{"title":"1.0.0 (2024-04-23)","id":"1-0-0-2024-04-23"}],"/build/ar-io-sdk/resources":[],"/build/ar-io-sdk/tokens":[],"/build/ar-io-sdk/upgrade-guides":[],"/build/gateways/admin":[{"title":"Overview","id":"overview"},{"title":"Debug","id":"debug"},{"title":"Queue Transaction","id":"queue-transaction"},{"title":"Block Data","id":"block-data"}],"/build/gateways/advanced":[{"title":"Overview","id":"overview"},{"title":"Data Storage Location","id":"data-storage-location"},{"title":"Admin API Key","id":"admin-api-key"},{"title":"Wallet Association","id":"wallet-association"},{"title":"Unbundling","id":"unbundling"},{"title":"Content Moderation","id":"content-moderation"},{"title":"Contiguous Data Cleanup","id":"contiguous-data-cleanup"},{"title":"ArNS Resolver","id":"ar-ns-resolver"}],"/build/gateways/bundler":[{"title":"Overview","id":"overview"},{"title":"Getting Started","id":"getting-started"},{"title":"Starting and Stopping the Bundler","id":"starting-and-stopping-the-bundler"}],"/build/gateways/delegated-staking":[{"title":"Overview","id":"overview"}],"/build/gateways/env":[{"title":"Overview","id":"overview"},{"title":"Variables","id":"variables"}],"/build/gateways/gateway-network":[{"title":"Overview","id":"overview"},{"title":"Gateway Address Registry (GAR)","id":"gateway-address-registry-gar"},{"title":"Staking","id":"staking"},{"title":"Schema","id":"schema"}],"/build/gateways/linux-setup":[{"title":"Overview","id":"overview"},{"title":"System Requirements","id":"system-requirements"},{"title":"Install Packages","id":"install-packages"},{"title":"Install the Node","id":"install-the-node"},{"title":"Set up Networking","id":"set-up-networking"}],"/build/gateways/observer":[{"title":"Overview","id":"overview"},{"title":"Observation Protocol","id":"observation-protocol"},{"title":"Onchain Reports","id":"onchain-reports"},{"title":"Selection of Observers","id":"selection-of-observers"},{"title":"Performance Evaluation","id":"performance-evaluation"},{"title":"Reward Distribution","id":"reward-distribution"},{"title":"Handling Inactive Gateways","id":"handling-inactive-gateways"},{"title":"Observer Report Details","id":"observer-report-details"},{"title":"General Information","id":"general-information"},{"title":"Overall Gateway Operator Assessment","id":"overall-gateway-operator-assessment"},{"title":"ArNS Assessments","id":"ar-ns-assessments"},{"title":"Example Observation Report","id":"example-observation-report"},{"title":"Viewing Observation Reports","id":"viewing-observation-reports"}],"/build/gateways/release-notes":[{"title":"Overview","id":"overview"},{"title":"[Release 20] - 2024-11-15","id":"release-20-2024-11-15"},{"title":"[Release 19] - 2024-10-21","id":"release-19-2024-10-21"},{"title":"[Release 18] - 2024-10-01","id":"release-18-2024-10-01"},{"title":"[Release 17] - 2024-09-09","id":"release-17-2024-09-09"},{"title":"[Release 16] - 2024-08-09","id":"release-16-2024-08-09"},{"title":"[Release 15] - 2024-07-19","id":"release-15-2024-07-19"},{"title":"[Release 14] - 2024-06-26","id":"release-14-2024-06-26"},{"title":"[Release 13] - 2024-06-24","id":"release-13-2024-06-24"},{"title":"[Release 12] - 2024-06-05","id":"release-12-2024-06-05"},{"title":"[Release 11] - 2024-05-21","id":"release-11-2024-05-21"},{"title":"[Release 10] - 2024-05-20","id":"release-10-2024-05-20"},{"title":"[Release 9] - 2024-04-10","id":"release-9-2024-04-10"},{"title":"[Release 8] - 2024-03-14","id":"release-8-2024-03-14"},{"title":"[Release 7] - 2024 - 02 - 14","id":"release-7-2024-02-14"},{"title":"[Release 6] - 2024-01-29","id":"release-6-2024-01-29"},{"title":"[Release 5] - 2024-01-25","id":"release-5-2024-01-25"},{"title":"[Release 4] - 2024-01-11","id":"release-4-2024-01-11"},{"title":"[Release 3] - 2023-12-05","id":"release-3-2023-12-05"}],"/build/gateways/troubleshooting":[{"title":"My Gateway Seems to be Running but...","id":"my-gateway-seems-to-be-running-but"},{"title":"My Gateway was Running, but now it isn't","id":"my-gateway-was-running-but-now-it-isnt"},{"title":"I am having Trouble Getting my Gateway Set up","id":"i-am-having-trouble-getting-my-gateway-set-up"},{"title":"Quick Lookup","id":"quick-lookup"}],"/build/gateways/upgrading":[{"title":"Prerequisites","id":"prerequisites"},{"title":"Checking your Release Number","id":"checking-your-release-number"},{"title":"Upgrade Steps","id":"upgrade-steps"}],"/build/gateways/windows-setup":[{"title":"Overview","id":"overview"},{"title":"Prerequisites","id":"prerequisites"},{"title":"Install Required Packages","id":"install-required-packages"},{"title":"Clone the Repository","id":"clone-the-repository"},{"title":"Create the Environment File","id":"create-the-environment-file"},{"title":"Supply Your Observer Wallet Keyfile:","id":"supply-your-observer-wallet-keyfile"},{"title":"Start the Docker Containers","id":"start-the-docker-containers"},{"title":"Set Up Router Port Forwarding","id":"set-up-router-port-forwarding"},{"title":"Install and Configure NGINX Docker","id":"install-and-configure-nginx-docker"}],"/build/guides/arns-viewer":[{"title":"Overview","id":"overview"},{"title":"Getting Started","id":"getting-started"},{"title":"Install ar.io SDK","id":"install-ar-io-sdk"},{"title":"Strip Default Content","id":"strip-default-content"},{"title":"Add Utilities","id":"add-utilities"},{"title":"Build Home Page","id":"build-home-page"},{"title":"Grid Component","id":"grid-component"},{"title":"Home Page","id":"home-page"},{"title":"Names Page","id":"names-page"},{"title":"Finish the Grid Component","id":"finish-the-grid-component"},{"title":"View Project","id":"view-project"},{"title":"CSS","id":"css"},{"title":"Deploy With Turbo","id":"deploy-with-turbo"},{"title":"References","id":"references"}],"/build/guides/gql":[{"title":"Overview","id":"overview"},{"title":"Constructing a Query","id":"constructing-a-query"},{"title":"Making a Query","id":"making-a-query"}],"/build/guides/permaweb-deploy":[{"title":"Overview","id":"overview"},{"title":"Getting Started","id":"getting-started"},{"title":"Deploying App","id":"deploying-app"}],"/learn/concepts/arns":[{"title":"Overview","id":"overview"},{"title":"Name Registry","id":"name-registry"},{"title":"Arweave Name Token (ANT)","id":"arweave-name-token-ant"},{"title":"Addressing Variable Market Conditions","id":"addressing-variable-market-conditions"},{"title":"Dynamic Pricing Model","id":"dynamic-pricing-model"}],"/learn/concepts/arweave":[{"title":"The Permanence Pie","id":"the-permanence-pie"},{"title":"What Is Arweave","id":"what-is-arweave"},{"title":"Gateways","id":"gateways"},{"title":"aoComputer","id":"ao-computer"},{"title":"The Permaweb","id":"the-permaweb"},{"title":"References and Further Reading","id":"references-and-further-reading"}],"/learn/concepts/manifests":[{"title":"Overview","id":"overview"},{"title":"What is a Manifest","id":"what-is-a-manifest"},{"title":"Specifications","id":"specifications"}],"/learn/concepts/normalized-addresses":[{"title":"Overview","id":"overview"},{"title":"At A Glance","id":"at-a-glance"},{"title":"Public Keys and Addresses","id":"public-keys-and-addresses"},{"title":"Normalizing Addresses","id":"normalizing-addresses"}],"/learn/concepts/sandboxing":[{"title":"Overview","id":"overview"},{"title":"TLS and its Role in Browser Sandboxing","id":"tls-and-its-role-in-browser-sandboxing"},{"title":"Deriving Sandbox Value","id":"deriving-sandbox-value"}],"/learn/concepts/wayfinder":[{"title":"Overview","id":"overview"},{"title":"Browser Integration","id":"browser-integration"},{"title":"Internal Application Integration","id":"internal-application-integration"},{"title":"Benefits of Wayfinder Over Hardcoded Gateway Links","id":"benefits-of-wayfinder-over-hardcoded-gateway-links"},{"title":"Use Cases","id":"use-cases"},{"title":"How it Works","id":"how-it-works"},{"title":"Wayfinder App","id":"wayfinder-app"}],"/learn/guides/ants":[{"title":"Overview","id":"overview"}],"/learn/guides/ants-on-bazar":[{"title":"Overview","id":"overview"},{"title":"Bazar Profile","id":"bazar-profile"},{"title":"Transfer ANT to the Profile","id":"transfer-ant-to-the-profile"},{"title":"Restore Controllers","id":"restore-controllers"}],"/build/ar-io-sdk/ants/approve-primary-name-request":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ants/configuration":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ants/get-controllers":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ants/get-handlers":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ants/get-info":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ants/get-owner":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ants/get-records":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ants/get-state":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ants/reassign-name":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ants/release-name":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ants/remove-controller":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ants/remove-primary-names":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ants/remove-record":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ants/set-controller":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ants/set-description":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ants/set-keywords":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ants/set-logo":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ants/set-name":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ants/set-record":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ants/set-ticker":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ants/transfer":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ario/configuration":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/gateways/observer/troubleshooting":[{"title":"Overview","id":"overview"},{"title":"Observer not running and/or unable to connect","id":"observer-not-running-and-or-unable-to-connect"},{"title":"Observer wallet has no AR","id":"observer-wallet-has-no-ar"},{"title":"Observer wallet ... does not match the 'observerWallet' set on the gateway ...","id":"observer-wallet-does-not-match-the-observer-wallet-set-on-the-gateway"},{"title":"Uncertain - confirm your OBSERVER_WALLET is set in the .env file and corresponding wallet is located in wallets/< address >.json...","id":"uncertain-confirm-your-observer-wallet-is-set-in-the-env-file-and-corresponding-wallet-is-located-in-wallets-address-json"}],"/learn/guides/ants/managing":[{"title":"Overview","id":"overview"},{"title":"Names","id":"names"},{"title":"ANTs","id":"ants"}],"/learn/guides/ants/registering":[{"title":"Overview","id":"overview"},{"title":"Connect Your Wallet","id":"connect-your-wallet"},{"title":"Checking Availability","id":"checking-availability"},{"title":"Configure Your Purchase","id":"configure-your-purchase"},{"title":"Confirm Your Purchase","id":"confirm-your-purchase"}],"/build/ar-io-sdk/ario/arns/buy-record":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ario/arns/extend-lease":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ario/arns/get-arns-auction":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/arns/get-arns-auction-prices":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/arns/get-arns-auctions":[{"title":"Parameters","id":"parameters"},{"title":"Example","id":"example"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/arns/get-arns-record":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/arns/get-arns-records":[{"title":"Parameters","id":"parameters"},{"title":"Example","id":"example"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/arns/get-demand-factor":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/arns/get-token-cost":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/arns/increase-undername-limit":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ario/arns/submit-auction-bid":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ario/epochs/get-current-epoch":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/epochs/get-distrobutions":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/epochs/get-epoch":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/epochs/get-observations":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/epochs/get-precribed-observers":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/epochs/save-observations":[],"/build/ar-io-sdk/ario/gateways/cancel-withdrawal":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ario/gateways/decrease-delegate-stake":[{"title":"Parameters","id":"parameters"},{"title":"Example","id":"example"}],"/build/ar-io-sdk/ario/gateways/decrease-operator-stake":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ario/gateways/get-allowed-delegates":[{"title":"Parameters","id":"parameters"},{"title":"Example","id":"example"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/gateways/get-delegations":[{"title":"Parameters","id":"parameters"},{"title":"Example","id":"example"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/gateways/get-gateway":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"},{"title":"Types","id":"types"}],"/build/ar-io-sdk/ario/gateways/get-gateway-delegates":[{"title":"Parameters","id":"parameters"},{"title":"Example","id":"example"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/gateways/get-gateway-vaults":[{"title":"Parameters","id":"parameters"},{"title":"Example","id":"example"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/gateways/get-gateways":[{"title":"Parameters","id":"parameters"},{"title":"Example","id":"example"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/gateways/get-redelegation-fee":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/gateways/increase-delegate-stake":[{"title":"Parameters","id":"parameters"},{"title":"Example","id":"example"}],"/build/ar-io-sdk/ario/gateways/increase-operator-stake":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ario/gateways/instant-withdrawal":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ario/gateways/join-network":[{"title":"Parameters","id":"parameters"},{"title":"Example","id":"example"}],"/build/ar-io-sdk/ario/gateways/leave-network":[{"title":"Parameters","id":"parameters"},{"title":"Example","id":"example"}],"/build/ar-io-sdk/ario/gateways/redelegate-stake":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ario/gateways/update-gateway-settings":[{"title":"Parameters","id":"parameters"},{"title":"Example","id":"example"}],"/build/ar-io-sdk/ario/general/get-balance":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/general/get-balances":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/general/get-info":[{"title":"Parameters","id":"parameters"},{"title":"Example","id":"example"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/general/get-token-supply":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"},{"title":"Types","id":"types"}],"/build/ar-io-sdk/ario/general/transfer":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/primary-names/get-primary-name":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/primary-names/get-primary-name-request":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/primary-names/get-primary-names":[{"title":"Parameters","id":"parameters"},{"title":"Example","id":"example"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/primary-names/request-primary-name":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"}],"/build/ar-io-sdk/ario/vaults/get-vault":[{"title":"Parameters","id":"parameters"},{"title":"Examples","id":"examples"},{"title":"Output","id":"output"}],"/build/ar-io-sdk/ario/vaults/get-vaults":[{"title":"Parameters","id":"parameters"},{"title":"Example","id":"example"},{"title":"Output","id":"output"}],"/build/gateways/networking/certbot/cloudflare":[],"/build/gateways/networking/certbot/namecheap":[]},"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute left-1/2 top-0 ml-[-38rem] h-[25rem] w-[81.25rem] dark:[mask-image:linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-gradient-to-r from-[#36b49f] to-[#DBFF75] opacity-40 [mask-image:radial-gradient(farthest-side_at_top,white,transparent)] dark:from-[#DF9BE8]/30 dark:to-[#DF9BE8]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":":S1:","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#:S1:)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute left-1/2 top-0 ml-[-19rem] w-[69.5625rem] fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],["$","div",null,{"className":"mx-auto flex h-full max-w-xl flex-col items-center justify-center py-16 text-center","children":[["$","p",null,{"className":"text-sm font-semibold text-zinc-900 dark:text-white","children":"404"}],["$","h1",null,{"className":"mt-2 text-2xl font-bold text-zinc-900 dark:text-white","children":"Page not found"}],["$","p",null,{"className":"mt-2 text-base text-zinc-600 dark:text-zinc-400","children":"Sorry, we couldn’t find the page you’re looking for."}],["$","$L7",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition rounded-full bg-zinc-900 py-1 px-3 text-white hover:bg-zinc-700 dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-1 dark:ring-inset dark:ring-emerald-400/20 dark:hover:bg-emerald-400/10 dark:hover:text-emerald-300 dark:hover:ring-emerald-300 mt-8","href":"/","children":[false,"Back to docs",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]]}]],"notFoundStyles":[]}]}]}]}]}]}]
